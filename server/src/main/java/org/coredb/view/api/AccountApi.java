/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.view.api;

import org.coredb.view.model.Contact;
import org.coredb.view.model.GpsLocation;
import org.coredb.view.model.Login;
import org.coredb.view.model.AmigoMessage;
import org.coredb.view.model.Settings;
import org.coredb.view.model.Notifications;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface AccountApi {


    @Operation(summary = "", description = "Attach app to specified identity", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(schema = @Schema(implementation = Login.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/attach",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Login> attach(@NotNull @Parameter(in = ParameterIn.QUERY, description = "attachment code for access" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "code", required = true) String code, @Parameter(in = ParameterIn.DEFAULT, description = "updated configuration", required=true, schema=@Schema()) @Valid @RequestBody AmigoMessage body);

    @Operation(summary = "", description = "Retrieve revision of cached identity", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/identity",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getIdentity(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Serach accounts with matching text", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Contact.class)))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contact>> getMatching(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "text to search on" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "match", required = true) String match);


    @Operation(summary = "", description = "Search accounts with matching location", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Contact.class)))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/search",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<Contact>> getNearby(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.DEFAULT, description = "updated configuration", required=true, schema=@Schema()) @Valid @RequestBody GpsLocation body, @Parameter(in = ParameterIn.QUERY, description = "range of matching values" ,schema=@Schema()) @Valid @RequestParam(value = "longitudeDelta", required = false) Integer longitudeDelta, @Parameter(in = ParameterIn.QUERY, description = "range of matching values" ,schema=@Schema()) @Valid @RequestParam(value = "latitudeDelta", required = false) Integer latitudeDelta, @Parameter(in = ParameterIn.QUERY, description = "range of matching values" ,schema=@Schema()) @Valid @RequestParam(value = "altitudeDelta", required = false) Integer altitudeDelta);


    @Operation(summary = "", description = "Retrieve account settings", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Settings.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/settings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Settings> getSettings(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Report user for review", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/report",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> report(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "id of reported account" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId);


    @Operation(summary = "", description = "Update cached identity", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/identity",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Integer> setIdentity(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Update cached identity", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation"),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/settings",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setSettings(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.DEFAULT, description = "updated configuration", required=true, schema=@Schema()) @Valid @RequestBody Settings body);


    @Operation(summary = "", description = "Retrieve status of account", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> status(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Update notification parameters", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Notifications.class))),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/notifications",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> setNotifications(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.DEFAULT, description = "updated configuration", required=true, schema=@Schema()) @Valid @RequestBody Notifications body);


    @Operation(summary = "", description = "Notify contact of event", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "successful operation"),
        
        @ApiResponse(responseCode = "404", description = "token not found"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/account/notify",
        method = RequestMethod.PUT)
    ResponseEntity<Void> setEvent(@NotNull @Parameter(in = ParameterIn.QUERY, description = "app token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "id of contact" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amigoId", required = true) String amigoId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "type of event" ,required=true,schema=@Schema(allowableValues={ "dialogue", "blurb" }
)) @Valid @RequestParam(value = "event", required = true) String event);


}

