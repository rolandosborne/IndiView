/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.api;

import java.math.BigDecimal;
import org.coredb.model.GpsLocation;
import org.coredb.model.Profile;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

public interface ProfileApi {

    @Operation(summary = "", description = "Update available state", tags={ "profile" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "password updated", content = @Content(schema = @Schema(implementation = Profile.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid token"),
        
        @ApiResponse(responseCode = "423", description = "account locked"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/profile/available",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Profile> availableProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "access token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "whether account is searchable" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "flag", required = true) Boolean flag);


    @Operation(summary = "", description = "Retrieve current profile values", tags={ "profile" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "location updated", content = @Content(schema = @Schema(implementation = Profile.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid token"),
        
        @ApiResponse(responseCode = "423", description = "account locked"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/profile/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Profile> getProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "access token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "request revision of profile", tags={ "profile" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "403", description = "access denied") })
    @RequestMapping(value = "/profile/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getProfileRevision(@NotNull @Parameter(in = ParameterIn.QUERY, description = "access token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token);


    @Operation(summary = "", description = "Set gps location of account", tags={ "profile" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "location updated", content = @Content(schema = @Schema(implementation = Profile.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid token"),
        
        @ApiResponse(responseCode = "423", description = "account locked"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/profile/location",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Profile> gpsProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "access token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @Parameter(in = ParameterIn.DEFAULT, description = "emigo to insert", required=true, schema=@Schema()) @Valid @RequestBody GpsLocation body, @Parameter(in = ParameterIn.QUERY, description = "expiration of location" ,schema=@Schema()) @Valid @RequestParam(value = "expires", required = false) BigDecimal expires);


    @Operation(summary = "", description = "Update searchable state", tags={ "profile" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "password updated", content = @Content(schema = @Schema(implementation = Profile.class))),
        
        @ApiResponse(responseCode = "401", description = "invalid token"),
        
        @ApiResponse(responseCode = "423", description = "account locked"),
        
        @ApiResponse(responseCode = "500", description = "internal server error") })
    @RequestMapping(value = "/profile/searchable",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Profile> searchableProfile(@NotNull @Parameter(in = ParameterIn.QUERY, description = "access token" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "token", required = true) String token, @NotNull @Parameter(in = ParameterIn.QUERY, description = "whether account is searchable" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "flag", required = true) Boolean flag);

}

